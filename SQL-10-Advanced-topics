10 Advanced SQL Concepts You Should Know
    1. Common table expressions (CTEs)
    2. Recursive CTEs
    3. Temporary functions
    4. Pivoting data with case when
    5. Except vs. Not In
    6. Self joins
    7. Rank vs. dense rank vs. row number
    8. Calculating delta values
    9. Calculating running totals
    10. Date-time manipulation

1.  CTE (Common Table Expression) ‡¶π‡¶≤‡ßã ‡¶è‡¶ï‡¶ü‡¶æ ‡¶õ‡ßã‡¶ü ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã ‡¶ï‡¶ø‡¶õ‡ßÅ, ‡¶Ø‡ßá‡¶ü‡¶æ ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶¨‡ßú ‡¶è‡¶ï‡¶ü‡¶æ SQL ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶®‡¶æ‡¶á ‡¶Ü‡¶∞ ‡¶™‡¶∞‡ßá ‡¶¨‡¶æ‡¶∞‡¶¨‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶ø‡•§
‡¶ï‡ßá‡¶® ‡¶ï‡¶∞‡¶ø?
    ‚Ä¢ ‡¶ï‡ßã‡¶° ‡¶™‡¶°‡¶º‡¶§‡ßá ‡¶∏‡¶π‡¶ú ‡¶π‡¶Ø‡¶º‡•§
‡¶Ø‡ßá‡¶Æ‡¶®, ‡¶¨‡ßú ‡¶è‡¶ï‡¶ü‡¶æ ‡¶ï‡¶æ‡¶ú‡¶ï‡ßá ‡¶õ‡ßã‡¶ü ‡¶õ‡ßã‡¶ü ‡¶Ö‡¶Ç‡¶∂‡ßá ‡¶≠‡¶æ‡¶ó ‡¶ï‡¶∞‡¶æ‡•§
    ‚Ä¢ ‡¶è‡¶ï‡¶á ‡¶ú‡¶ø‡¶®‡¶ø‡¶∏ ‡¶¨‡¶æ‡¶∞‡¶¨‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶ñ‡¶§‡ßá ‡¶π‡ßü ‡¶®‡¶æ‡•§
‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶™‡¶∞‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§
    ‚Ä¢ ‡¶ï‡ßã‡¶° ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶π‡ßü‡•§
simple
select  name, salary
from fresher.People
where name in (select
 distinct name
 from fresher.population
 where country = "Canada" and city="Toronto")   and
 salary >= (select 
 avg(salary)
 from fresher.salaries
 where gender = "Female")

CTEs



with toronto_ppl as
(select distinct name 
from fresher.population 
where country = "Canada" and city = "Toronto") ,

avg_female_salary as
(select 
avg(salary) as avgSalary
from fresher.salaries
where gender = "Female")



select 
name,
salary
from fresher.People 
where name in (select distinct name from toronto_ppl)
and salary >= (select avgSalary from avg_female_salary)



2.Recursive CTE = ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶ì‡¶™‡¶∞ ‡¶¨‡¶æ‡¶∞‡¶¨‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶æ
‡¶Æ‡¶æ‡¶®‡ßá:
‡¶è‡¶ï‡¶ü‡¶æ ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶ø ‚Üí ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶∏‡ßá‡¶á ‡¶ï‡¶æ‡¶ú ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶è‡¶ï‡¶á ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶ø ‚Üí ‡¶Ø‡¶§‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶æ‡¶ú ‡¶∂‡ßá‡¶∑ ‡¶®‡¶æ ‡¶π‡¶Ø‡¶º‡•§

‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ (‡¶ñ‡ßÅ‡¶¨ ‡¶∏‡¶π‡¶ú):
‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø‡¶¶‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶ì‡•§
    ‚Ä¢ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá: ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶¨‡¶æ-‡¶Æ‡¶æ‡¶ï‡ßá ‡¶≤‡¶ø‡¶ñ‡ßã (‡¶∏‡¶¨‡¶ö‡ßá‡¶Ø‡¶º‡ßá ‡¶â‡¶™‡¶∞‡ßá)
    ‚Ä¢ ‡¶§‡¶æ‡¶∞‡¶™‡¶∞: ‡¶¨‡¶æ‡¶¨‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶™‡¶¶‡¶æ‡¶¶‡¶æ‡¶ï‡ßá ‡¶≤‡¶ø‡¶ñ‡ßã
    ‚Ä¢ ‡¶§‡¶æ‡¶∞‡¶™‡¶∞: ‡¶∏‡ßá‡¶á ‡¶¨‡¶æ‡¶™‡¶¶‡¶æ‡¶¶‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶¨‡¶æ (‡¶Ø‡¶¶‡¶ø ‡¶•‡¶æ‡¶ï‡ßá)
    ‚Ä¢ ‚Ä¶‡¶è‡¶≠‡¶æ‡¶¨‡ßá ‡¶â‡¶™‡¶∞‡ßá‡¶∞ ‡¶¶‡¶ø‡¶ï‡ßá ‡¶ö‡¶≤‡ßá ‡¶Ø‡¶æ‡¶ì
‡¶è‡¶ü‡¶æ ‡¶ï‡¶∞‡¶≤‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶¨‡¶æ‡¶∞‡¶¨‡¶æ‡¶∞ ‡¶è‡¶ï‡¶á ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá, "‡¶è‡¶ñ‡¶® ‡¶è‡¶á ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø‡¶∞ ‡¶¨‡¶æ‡¶¨‡¶æ ‡¶ï‡ßá?"






WITH RECURSIVE org_structure AS (
    SELECT 
        id,
        manager_id
    FROM fresher.staff_members
    WHERE manager_id IS NULL

    UNION ALL

    SELECT
        sm.id,
        sm.manager_id
    FROM fresher.staff_members sm
    INNER JOIN org_structure os
        ON os.id = sm.manager_id
)
SELECT * FROM org_structure;


3. Temporary Functions
Knowing how to write temporary¬†functions¬†is important for several reasons:
    1. It allows you to break code down into smaller chunks.
    2. It‚Äôs useful for writing cleaner code.
    3. It prevents repetition and allows you to reuse code, similar to using functions in Python.
Simple sql
select name,
case 
  when tenure < 1 then "analyst"
  when tenure between 1 and 3 then "associate" 
  when tenure between 3 and 5 then "senior"
  when tenure > 5 then "vp"
  else "n/a"
end as seniority
from fresher.employees;
temporary functions for big Query

CREATE TEMPORARY FUNCTION get_seniority(tenure INT64) AS (
   CASE WHEN tenure < 1 THEN "analyst"
        WHEN tenure BETWEEN 1 and 3 THEN "associate"
        WHEN tenure BETWEEN 3 and 5 THEN "senior"
        WHEN tenure > 5 THEN "vp"
        ELSE "n/a"
   END
);
SELECT name
       , get_seniority(tenure) as seniority
FROM employees



4.Pivoting data with case when
select 
id,
max(case when month = 'Jan' then revenue end) as Jan_Revenue,
max(case when month = 'Feb' then revenue end) as Feb_Revenue,
max(case when month = 'Mar' then revenue end) as Mar_Revenue
from fresher.sales_data
group by id;



5.Except vs. Not in

EXCEPT:
‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶ï‡¶≤‡¶æ‡¶Æ‡¶ì ‡¶§‡ßÅ‡¶≤‡¶®‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡ßü‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ (distinct) ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßá‡•§
    ‚Ä¢ NOT IN:
‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡¶≤‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶® ‡¶¶‡¶ø‡ßü‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá, ‡¶Ü‡¶∞ ‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶®‡¶æ‡•§
‡ß®. ‡¶ï‡¶§‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ï‡¶≤‡¶æ‡¶Æ ‡¶§‡ßÅ‡¶≤‡¶®‡¶æ ‡¶ï‡¶∞‡ßá?
    ‚Ä¢ EXCEPT: ‡¶¶‡ßÅ‡¶á‡¶ü‡¶ø ‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∞‡¶ø‡¶∞ ‡¶è‡¶ï‡¶á ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶ï ‡¶ï‡¶≤‡¶æ‡¶Æ ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§
    ‚Ä¢ NOT IN: ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡¶≤‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶® ‡¶§‡ßÅ‡¶≤‡¶®‡¶æ ‡¶ï‡¶∞‡ßá‡•§
‡ß©. ‡¶ï‡¶ñ‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßã?
    ‚Ä¢ EXCEPT: ‡¶Ø‡¶¶‡¶ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤/‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∞‡¶ø‡¶§‡ßá ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶ï‡¶≤‡¶æ‡¶Æ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶Æ‡¶ø‡¶≤ ‡¶®‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶ì‡•§
    ‚Ä¢ NOT IN: ‡¶Ø‡¶¶‡¶ø ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡¶≤‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶® ‡¶¶‡¶ø‡ßü‡ßá ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶ì, ‡¶Ø‡ßá‡¶Æ‡¶® ‡¶ï‡ßã‡¶®‡ßã ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¨‡¶æ ‡¶®‡¶æ‡¶Æ ‡¶Ø‡ßá‡¶ü‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤/‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∞‡¶ø‡¶§‡ßá ‡¶®‡ßá‡¶á‡•§
‡¶ß‡¶∞‡¶ø, ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡ß®‡¶ü‡¶ø ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶Ü‡¶õ‡ßá:
    ‚Ä¢ tableA: ‡¶Ø‡¶æ‡¶∞‡¶æ ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá
    ‚Ä¢ tableB: ‡¶Ø‡¶æ‡¶∞‡¶æ ‡¶è‡¶ï‡ßç‡¶∏‡¶æ‡¶Æ‡ßá ‡¶Ö‡¶Ç‡¶∂ ‡¶®‡¶ø‡ßü‡ßá‡¶õ‡ßá
‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶á:
    1. tableA ‡¶§‡ßá ‡¶Ø‡¶æ‡¶∞‡¶æ ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ tableB ‡¶§‡ßá ‡¶®‡ßá‡¶á (EXCEPT ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá)
    2. tableA ‡¶è‡¶∞ ‡¶ï‡ßã‡¶® id ‡¶ó‡ßÅ‡¶≤‡ßã tableB ‡¶§‡ßá ‡¶®‡ßá‡¶á (NOT IN ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá)

-- ‡¶Ø‡¶æ‡¶∞‡¶æ ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶è‡¶ï‡ßç‡¶∏‡¶æ‡¶Æ‡ßá ‡¶¶‡ßá‡ßü‡¶®‡¶ø (id + name ‡¶Æ‡¶ø‡¶≤‡¶ø‡ßü‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶π‡¶¨‡ßá)
SELECT id, name FROM tableA
EXCEPT
SELECT id, name FROM tableB;


-- tableA ‡¶è‡¶∞ ‡¶è‡¶Æ‡¶® id ‡¶Ø‡ßá‡¶ó‡ßÅ‡¶≤‡ßã tableB ‡¶§‡ßá ‡¶®‡¶æ‡¶á
SELECT id, name FROM fresher.tableA
WHERE id NOT IN (SELECT id FROM tableB);


6.self joins
select 
a.Name as Employee
from fresher.Employee as a  -- kormocari
join fresher.Employee as b  -- manajer

on a.ManagerId = b.id;
where a.Salary > b.Salary;



| a.Id | a.Name | a.Salary | a.ManagerId | b.Id | b.Name | b.Salary | b.ManagerId |
| ---- | ------ | -------- | ----------- | ---- | ------ | -------- | ----------- |
| 1    | Joe    | 70000    | 3           | 3    | Sam    | 60000    | NULL        |
| 2    | Henry  | 80000    | 4           | 4    | Max    | 90000    | NULL        |
7.Rank vs. Dense Rank vs. Row Number

‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
‡¶ï‡¶æ‡¶ú
‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ (‡ßß ‡¶≤‡¶æ‡¶á‡¶®‡ßá)
RANK()
‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶ô‡ßç‡¶ï‡¶ø‡¶Ç
‡¶è‡¶ï‡¶ø ‡¶Æ‡¶æ‡¶®‡ßá ‡¶ü‡¶æ‡¶á ‡¶π‡¶≤‡ßá ‡¶è‡¶ï‡¶á ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶ô‡ßç‡¶ï ‡¶¶‡ßá‡ßü, ‡¶™‡¶∞‡ßá‡¶∞ ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶ô‡ßç‡¶ï ‡¶∏‡ßç‡¶ï‡¶ø‡¶™ ‡¶ï‡¶∞‡ßá (e.g. 1, 1, 3)‡•§
DENSE_RANK()
‡¶ò‡¶® ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶ô‡ßç‡¶ï
‡¶è‡¶ï‡¶á ‡¶Æ‡¶æ‡¶®‡ßá ‡¶è‡¶ï‡¶á ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶ô‡ßç‡¶ï ‡¶¶‡ßá‡ßü, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶™‡¶∞‡ßá‡¶∞ ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶ô‡ßç‡¶ï ‡¶∏‡ßç‡¶ï‡¶ø‡¶™ ‡¶ï‡¶∞‡ßá ‡¶®‡¶æ (e.g. 1, 1, 2)‡•§
ROW_NUMBER()
‡¶∏‡¶æ‡¶∞‡¶ø ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞
‡¶∏‡¶¨ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶°‡¶ï‡ßá ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶ß‡¶æ‡¶∞‡¶æ‡¶¨‡¶æ‡¶π‡¶ø‡¶ï ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡ßá‡ßü (e.g. 1, 2, 3), ‡¶ü‡¶æ‡¶á ‡¶π‡¶≤‡ßá‡¶ì ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶Æ‡¶≤‡¶ø ‡¶≠‡ßá‡¶ô‡ßá ‡¶¶‡ßá‡ßü‡•§
select
Name,
Salary,
Rank() over (order by salary desc) as Rank_,
dense_rank() over (order by salary desc) as dense_rank_,
row_number() over (order by salary desc) as row_number_  -- ROW_NUMBER() ‡¶∏‡¶¨‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶á‡¶â‡¶®‡¶ø‡¶ï ‡¶∏‡¶ø‡¶∞‡¶ø‡ßü‡¶æ‡¶≤ ‡¶¶‡ßá‡ßü‡•§
from fresher.Employee1;

8. Calculating Delta Values

üß† ‡¶ï‡ßÄ ‡¶¨‡ßã‡¶ù‡¶æ‡ßü Delta Value?
Delta value ‡¶Æ‡¶æ‡¶®‡ßá ‡¶π‡¶≤‡ßã:
‡¶Ü‡¶ó‡ßá ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ñ‡¶®-‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶™‡¶æ‡¶∞‡ßç‡¶•‡¶ï‡ßç‡¶Ø‡•§
üìä ‡¶Ø‡ßá‡¶Æ‡¶®‡¶É
    ‚Ä¢ ‡¶è‡¶á ‡¶Æ‡¶æ‡¶∏‡ßá ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶ø ‡¶π‡¶≤‡ßã ‡ßß‡ß´,‡ß¶‡ß¶‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ
    ‚Ä¢ ‡¶ó‡¶§ ‡¶Æ‡¶æ‡¶∏‡ßá ‡¶õ‡¶ø‡¶≤ ‡ßß‡ß®,‡ß¶‡ß¶‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ
    ‚Ä¢ ‡¶§‡¶æ‡¶π‡¶≤‡ßá delta = 15000 - 12000 = 3000
üëâ ‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé ‡ß©,‡ß¶‡ß¶‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶¨‡ßá‡ßú‡ßá‡¶õ‡ßá

SQL ‡¶è ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶∞‡¶¨‡ßã?
‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶ø:
    ‚Ä¢ LAG() ‚Üí ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶Ü‡¶®‡¶§‡ßá
    ‚Ä¢ LEAD() ‚Üí ‡¶™‡¶∞‡ßá‡¶∞ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶Ü‡¶®‡¶§‡ßá

select 
month,
revenue,
lag(revenue) over(order by month) as prev_month_revenue,
revenue - lag(revenue) over (order by month) as delta
from fresher.monthly_sales;


select 
month ,
revenue,
lead(revenue) over(order by month) as next_month_revenue,
revenue - lead(revenue) over(order by month ) as delta
from fresher.monthly_sales;

delta = current_value - previous_value (LAG)
‡¶¨‡¶æ
delta = next_value - current_value (LEAD)

9. Calculating Running Totals
Running Total ‡¶¨‡¶æ Cumulative Total ‡¶Æ‡¶æ‡¶®‡ßá ‡¶π‡¶ö‡ßç‡¶õ‡ßá:
‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∞‡ßã ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶∏‡¶¨ ‡¶∞‡ßã ‡¶è‡¶∞ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶Æ‡ßã‡¶ü ‡¶Ø‡ßã‡¶ó‡¶´‡¶≤‡•§
select 
Month ,
revenue,
sum(revenue) over (order by month) as cumulative
from fresher.monthly_sales;  

10. Date-Time Manipulation
-- SQL Query ‚Äî Find IDs with Higher Temperature Than Previous Day

by cte
WITH tableA AS (
    SELECT 
        Id,
        RecordDate,
        Temperature,
        LAG(Temperature) OVER (ORDER BY RecordDate) AS prev_temperature
    FROM fresher.TemperatureLog
),
tableB AS (
    SELECT 
        Id,
        Temperature
    FROM fresher.TemperatureLog
)
SELECT 
    a.Id,
    a.RecordDate,
    a.Temperature
FROM tableA a
JOIN tableB b ON a.Id = b.Id
WHERE a.prev_temperature < b.Temperature;









================

select 
a.Id as tableA,
b.Id as tableB
from fresher.TemperatureLog a,
     fresher.TemperatureLog b
'4', '1'
'3', '1'
'2', '1'
'1', '1'
'4', '2'
'3', '2'
'2', '2'
'1', '2'
'4', '3'
'3', '3'
'2', '3'
'1', '3'
'4', '4'
'3', '4'
'2', '4'
'1', '4'









select 
a.Id as tableA,
b.Id as tableB,
a.Temperature as a,
b.Temperature as b

from fresher.TemperatureLog a,
     fresher.TemperatureLog b
     
where a.Temperature > b.Temperature
and datediff(a.RecordDate,b.RecordDate) = 1;

===============================
SELECT
    Id,
    RecordDate,
    Temperature
FROM (
    SELECT
        Id,
        RecordDate,
        Temperature,
        LAG(Temperature) OVER (ORDER BY RecordDate) AS prev_temp
    FROM TemperatureLog
) AS sub
WHERE Temperature > prev_temp;



1. EXTRACT
‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: Date/time ‡¶•‡ßá‡¶ï‡ßá ‡¶Ö‡¶Ç‡¶∂ ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶ï‡¶∞‡¶§‡ßá

select 
RecordDate,
extract(year from RecordDate) as year,
extract(month from RecordDate) as month,
extract(day from RecordDate) as day
from fresher.TemperatureLog;

2. DATEDIFF
‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: ‡¶¶‡ßÅ‡¶á‡¶ü‡¶ø Date ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶™‡¶æ‡¶∞‡ßç‡¶•‡¶ï‡ßç‡¶Ø (‡¶¶‡¶ø‡¶®‡ßá) ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá

select Id,
RecordDate,
datediff(recordDate,'2014-01-01') as Days_from_start
from fresher.TemperatureLog;

üî∏ 3. DATE_ADD / DATE_SUB
‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: Date ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶¶‡¶ø‡¶® ‡¶Ø‡ßã‡¶ó/‡¶¨‡¶ø‡¶Ø‡¶º‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá
select 
Id,
RecordDate,
date_add(RecordDate, interval 7 day ) as Plus7days,
date_sub(RecordDate, interval 3 day) as minus3days
from fresher.TemperatureLog;




4. DATE_TRUNC (depends on SQL flavor: works in PostgreSQL, BigQuery)
‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ‡¶ï‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶á‡¶â‡¶®‡¶ø‡¶ü‡ßá ‡¶ü‡ßç‡¶∞‡¶æ‡¶ô‡ßç‡¶ï‡ßá‡¶ü (truncate) ‡¶ï‡¶∞‡¶æ ‚Äî ‡¶Ø‡ßá‡¶Æ‡¶® ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶Æ‡¶æ‡¶∏, ‡¶∏‡¶™‡ßç‡¶§‡¶æ‡¶π, ‡¶¨‡¶õ‡¶∞ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§‡•§
SELECT 
    Id,
    RecordDate,
    DATE_TRUNC('month', RecordDate) AS MonthStart
FROM TemperatureLog;

Note: MySQL-‡¶è DATE_TRUNC() ‡¶®‡¶æ‡¶á, ‡¶§‡¶æ‡¶á ‡¶è‡¶á ‡¶ï‡¶æ‡¶ú DATE_FORMAT() ‡¶¨‡¶æ EXTRACT() ‡¶¶‡¶ø‡ßü‡ßá ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡•§
